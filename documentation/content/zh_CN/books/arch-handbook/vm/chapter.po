# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2021-02-21 18:54-0300\n"
"PO-Revision-Date: 2021-04-05 12:38+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Chinese (Simplified) <https://translate-dev.freebsd.org/"
"projects/documentation/booksarch-handbookvmchapter/zh_CN/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.5.2\n"

#. type: YAML Front Matter: title
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:1
#, no-wrap
msgid "Chapter 7. Virtual Memory System"
msgstr ""

#. type: Title =
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:8
#, no-wrap
msgid "Virtual Memory System"
msgstr "虚拟内存系统"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:33
#, no-wrap
msgid "Management of Physical Memory `vm_page_t`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:36
msgid ""
"Physical memory is managed on a page-by-page basis through the `vm_page_t` "
"structure. Pages of physical memory are categorized through the placement of "
"their respective `vm_page_t` structures on one of several paging queues."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:38
msgid ""
"A page can be in a wired, active, inactive, cache, or free state. Except for "
"the wired state, the page is typically placed in a doubly link list queue "
"representing the state that it is in. Wired pages are not placed on any "
"queue."
msgstr ""
"一页可以处于在线(wired)、活动(active)，去活(inactive)、缓存(cache)、自由(free)状态。除了在线状态，页一般被放置在一个"
"双向链表队列里，代表了它所处的状态。在线页不放置在任何队列里。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:40
msgid ""
"FreeBSD implements a more involved paging queue for cached and free pages in "
"order to implement page coloring. Each of these states involves multiple "
"queues arranged according to the size of the processor's L1 and L2 "
"caches. When a new page needs to be allocated, FreeBSD attempts to obtain "
"one that is reasonably well aligned from the point of view of the L1 and L2 "
"caches relative to the VM object the page is being allocated for."
msgstr ""
"FreeBSD为缓存页和自由页实现了一个更为复杂的页队列机制，以实现对页的分类管理。每一种状态都对应着多个队列，队列的安排对应着处理器的一级、二级缓存。当"
"需要分配一个新页时，FreeBSD会试图把一个按一级、二级缓存对齐的页面分配给虚拟内存对象。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:42
msgid ""
"Additionally, a page may be held with a reference count or locked with a "
"busy count. The VM system also implements an \"ultimate locked\" state for a "
"page using the PG_BUSY bit in the page's flags."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:44
msgid ""
"In general terms, each of the paging queues operates in a LRU fashion. A "
"page is typically placed in a wired or active state initially. When wired, "
"the page is usually associated with a page table somewhere. The VM system "
"ages the page by scanning pages in a more active paging queue (LRU) in order "
"to move them to a less-active paging queue. Pages that get moved into the "
"cache are still associated with a VM object but are candidates for immediate "
"reuse. Pages in the free queue are truly free. FreeBSD attempts to minimize "
"the number of pages in the free queue, but a certain minimum number of truly "
"free pages must be maintained in order to accommodate page allocation at "
"interrupt time."
msgstr ""
"总之，每个页队列都按照LRU(Least-Recently Used)的原则工作。<tip><title>译者注</title><para"
">短语Least-Recently Used有两种理解方式：1.将“least-"
"recently”理解为反向比较级，意义为“最早”，整个短语理解为“最近的使用时间最早”；2.将“least”和“recently”理解为副词，都修饰“u"
"sed”，整个短语理解为“最近最少使用”。这两种理解方式的实际意义基本相同。</para></tip>一个页常常最初处于在线或活动状态。在线时，页常常关联"
"于某处的页表。虚拟内存系统通过扫描在一个较活跃的页队列(LRU)确定页的年龄，以便将他们移到一个较不活跃的页队列中。移动到缓存中的页依然与一个VM对象关联"
"，但被作为立即再用的候选。在自由对列中的页是真正未被使用的。FreeBSD尽量不将页放在自由队列中，但是必须保持一定数量的自由页，以便响应中断时分配。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:46
msgid ""
"If a process attempts to access a page that does not exist in its page table "
"but does exist in one of the paging queues (such as the inactive or cache "
"queues), a relatively inexpensive page reactivation fault occurs which "
"causes the page to be reactivated. If the page does not exist in system "
"memory at all, the process must block while the page is brought in from "
"disk."
msgstr ""
"如果一个进程试图访问一个不在页表中而在某一队列中的页(例如去活队列或缓存队列)，一个相对耗费资源少的页错误发生，导致页被重激活。如果页根本不存在于系统内存"
"之中，进程必须被阻塞，此时页被从磁盘中载入。<tip><title>译者注</title><para>Intel等厂商的CPU工作在保护模式时，可用来实现"
"虚拟内存。当寻址的地址空间对应着真实内存时，则正常读写；当寻址的地址空间没有对应的真实内存时，CPU会产生一个“错误”，通知操作系统与磁盘等设备进行交换，"
"读寻址则调入存储内容，写寻址则写出存储内容。这个“错误”并非操作系统或应用程序开发人员犯下的错误，尽管在CPU硬件实现中这与应用程序或操作系统内核崩溃的错"
"误的发生机制相同。参见Intel的CPU保护模式开发手册。</para></tip>。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:48
msgid ""
"FreeBSD dynamically tunes its paging queues and attempts to maintain "
"reasonable ratios of pages in the various queues as well as attempts to "
"maintain a reasonable breakdown of clean versus dirty pages. The amount of "
"rebalancing that occurs depends on the system's memory load. This "
"rebalancing is implemented by the pageout daemon and involves laundering "
"dirty pages (syncing them with their backing store), noticing when pages are "
"activity referenced (resetting their position in the LRU queues or moving "
"them between queues), migrating pages between queues when the queues are out "
"of balance, and so forth. FreeBSD's VM system is willing to take a "
"reasonable number of reactivation page faults to determine how active or how "
"idle a page actually is. This leads to better decisions being made as to "
"when to launder or swap-out a page."
msgstr ""
"FreeBSD动态的调整页队列，试图将各个队列中的页数维护在一个适当的比例上，同时管理程序崩溃的已清理和未清理页。重新平衡的比例数值决定于系统内存的负担。"
"这种重新平衡由pageout守护进程实现，包括清理未清理页(与他们的后备存储同步)、监视页被引用的活跃程度(重置它们在LRU队列中的位置或在不同活跃程度的"
"页队列间移动)、当比例不平衡时在队列间迁移页，如此等等。FreeBSD的VM系统会将重激活页而产生的错误频率调低到一个合理的数值，由此确定某一页活跃/闲置"
"的实际程度。这可以为更好的决定何时清理/分配一个页做出决策。"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:50
#, no-wrap
msgid "The Unified Buffer Cache `vm_object_t`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:53
msgid ""
"FreeBSD implements the idea of a generic \"VM object\". VM objects can be "
"associated with backing store of various typesunbacked, swap-backed, "
"physical device-backed, or file-backed storage. Since the filesystem uses "
"the same VM objects to manage in-core data relating to files, the result is "
"a unified buffer cache."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:55
msgid ""
"VM objects can be _shadowed_. That is, they can be stacked on top of each "
"other. For example, you might have a swap-backed VM object stacked on top of "
"a file-backed VM object in order to implement a MAP_PRIVATE mmap()ing. This "
"stacking is also used to implement various sharing properties, including "
"copy-on-write, for forked address spaces."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:57
msgid ""
"It should be noted that a `vm_page_t` can only be associated with one VM "
"object at a time. The VM object shadowing implements the perceived sharing "
"of the same page across multiple instances."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:59
#, no-wrap
msgid "Filesystem I/O `struct buf`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:62
msgid ""
"vnode-backed VM objects, such as file-backed objects, generally need to "
"maintain their own clean/dirty info independent from the VM system's idea of "
"clean/dirty. For example, when the VM system decides to synchronize a "
"physical page to its backing store, the VM system needs to mark the page "
"clean before the page is actually written to its backing "
"store. Additionally, filesystems need to be able to map portions of a file "
"or file metadata into KVM in order to operate on it."
msgstr ""
"vnode VM对象，比如文件VM对象，一般需要维护它们自己的清理(clean)/未清理(dirty)信息，而不依赖于文件系统的清理/未清理维护。例如，当"
"VM系统要同步一个物理页和其对应的实际存储器，VM系统就需要在写入到实际存储器前将该页标记为已清理。另外，文件系统要能够将文件或文件元数据的各部分映射到内"
"核虚拟内存(KVM)中以便操作。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:64
msgid ""
"The entities used to manage this are known as filesystem buffers, ``struct "
"buf``'s, or ``bp``'s. When a filesystem needs to operate on a portion of a "
"VM object, it typically maps part of the object into a struct buf and then "
"maps the pages in the struct buf into KVM. In the same manner, disk I/O is "
"typically issued by mapping portions of objects into buffer structures and "
"then issuing the I/O on the buffer structures. The underlying vm_page_t's "
"are typically busied for the duration of the I/O. Filesystem buffers also "
"have their own notion of being busy, which is useful to filesystem driver "
"code which would rather operate on filesystem buffers instead of hard VM "
"pages."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:66
msgid ""
"FreeBSD reserves a limited amount of KVM to hold mappings from struct bufs, "
"but it should be made clear that this KVM is used solely to hold mappings "
"and does not limit the ability to cache data. Physical data caching is "
"strictly a function of ``vm_page_t``'s, not filesystem buffers. However, "
"since filesystem buffers are used to placehold I/O, they do inherently limit "
"the amount of concurrent I/O possible. However, as there are usually a few "
"thousand filesystem buffers available, this is not usually a problem."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:68
#, no-wrap
msgid "Mapping Page Tables `vm_map_t, vm_entry_t`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:71
msgid ""
"FreeBSD separates the physical page table topology from the VM system. All "
"hard per-process page tables can be reconstructed on the fly and are usually "
"considered throwaway. Special page tables such as those managing KVM are "
"typically permanently preallocated. These page tables are not throwaway."
msgstr ""
"FreeBSD将物理页表结构从VM系统中分离了出来。各进程的所有页表可以脱离进程(on the "
"fly)重建，并且通常被认为是一次性的。特殊的页表，如内核虚拟内存(KVM)，常常是被永久性预分配的；这些页表不是一次性的。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:73
msgid ""
"FreeBSD associates portions of vm_objects with address ranges in virtual "
"memory through `vm_map_t` and `vm_entry_t` structures. Page tables are "
"directly synthesized from the `vm_map_t`/`vm_entry_t`/ `vm_object_t` "
"hierarchy. Recall that I mentioned that physical pages are only directly "
"associated with a `vm_object`; that is not quite true. ``vm_page_t``'s are "
"also linked into page tables that they are actively associated with. One "
"`vm_page_t` can be linked into several _pmaps_, as page tables are "
"called. However, the hierarchical association holds, so all references to "
"the same page in the same object reference the same `vm_page_t` and thus "
"give us buffer cache unification across the board."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:75
#, no-wrap
msgid "KVM Memory Mapping"
msgstr "KVM存储映射"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:78
msgid ""
"FreeBSD uses KVM to hold various kernel structures. The single largest "
"entity held in KVM is the filesystem buffer cache. That is, mappings "
"relating to `struct buf` entities."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:80
msgid ""
"Unlike Linux, FreeBSD does _not_ map all of physical memory into KVM. This "
"means that FreeBSD can handle memory configurations up to 4G on 32 bit "
"platforms. In fact, if the mmu were capable of it, FreeBSD could "
"theoretically handle memory configurations up to 8TB on a 32 bit "
"platform. However, since most 32 bit platforms are only capable of mapping "
"4GB of ram, this is a moot point."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:82
msgid ""
"KVM is managed through several mechanisms. The main mechanism used to manage "
"KVM is the _zone allocator_. The zone allocator takes a chunk of KVM and "
"splits it up into constant-sized blocks of memory in order to allocate a "
"specific type of structure. You can use `vmstat -m` to get an overview of "
"current KVM utilization broken down by zone."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:84
#, no-wrap
msgid "Tuning the FreeBSD VM System"
msgstr "调整FreeBSD的虚拟内存系统"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:87
msgid ""
"A concerted effort has been made to make the FreeBSD kernel dynamically tune "
"itself. Typically you do not need to mess with anything beyond the "
"`maxusers` and `NMBCLUSTERS` kernel config options. That is, kernel "
"compilation options specified in (typically) "
"[.filename]#/usr/src/sys/i386/conf/CONFIG_FILE#. A description of all "
"available kernel configuration options can be found in "
"[.filename]#/usr/src/sys/i386/conf/LINT#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:89
msgid ""
"In a large system configuration you may wish to increase `maxusers`. Values "
"typically range from 10 to 128. Note that raising `maxusers` too high can "
"cause the system to overflow available KVM resulting in unpredictable "
"operation. It is better to leave `maxusers` at some reasonable number and "
"add other options, such as `NMBCLUSTERS`, to increase specific resources."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:91
msgid ""
"If your system is going to use the network heavily, you may want to increase "
"`NMBCLUSTERS`. Typical values range from 1024 to 4096."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:93
msgid ""
"The `NBUF` parameter is also traditionally used to scale the system. This "
"parameter determines the amount of KVA the system can use to map filesystem "
"buffers for I/O. Note that this parameter has nothing whatsoever to do with "
"the unified buffer cache! This parameter is dynamically tuned in 3.0-CURRENT "
"and later kernels and should generally not be adjusted manually. We "
"recommend that you _not_ try to specify an `NBUF` parameter. Let the system "
"pick it. Too small a value can result in extremely inefficient filesystem "
"operation while too large a value can starve the page queues by causing too "
"many pages to become wired down."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:95
msgid ""
"By default, FreeBSD kernels are not optimized. You can set debugging and "
"optimization flags with the `makeoptions` directive in the kernel "
"configuration. Note that you should not use `-g` unless you can accommodate "
"the large (typically 7 MB+) kernels that result."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:100
#, no-wrap
msgid ""
"makeoptions      DEBUG=\"-g\"\n"
"makeoptions      COPTFLAGS=\"-O -pipe\"\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:103
msgid ""
"Sysctl provides a way to tune kernel parameters at run-time. You typically "
"do not need to mess with any of the sysctl variables, especially the VM "
"related ones."
msgstr "Sysctl提供了在运行时调整内核的方式。你通常不需要指定任何sysctl变量，尤其是与VM相关的那些变量。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:105
msgid ""
"Run time VM and system tuning is relatively straightforward. First, use Soft "
"Updates on your UFS/FFS filesystems whenever "
"possible. [.filename]#/usr/src/sys/ufs/ffs/README.softupdates# contains "
"instructions (and restrictions) on how to configure it."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:107
msgid ""
"Second, configure sufficient swap. You should have a swap partition "
"configured on each physical disk, up to four, even on your \"work\" "
"disks. You should have at least 2x the swap space as you have main memory, "
"and possibly even more if you do not have a lot of memory. You should also "
"size your swap partition based on the maximum memory configuration you ever "
"intend to put on the machine so you do not have to repartition your disks "
"later on. If you want to be able to accommodate a crash dump, your first "
"swap partition must be at least as large as main memory and "
"[.filename]#/var/crash# must have sufficient free space to hold the dump."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/vm/chapter.adoc:108
msgid ""
"NFS-based swap is perfectly acceptable on 4.X or later systems, but you must "
"be aware that the NFS server will take the brunt of the paging load."
msgstr "NFS上的交换分区可以很好的被4.X或后来的系统使用，但是你必须明白NFS服务器将要经受页装载操作很强的冲击。"
