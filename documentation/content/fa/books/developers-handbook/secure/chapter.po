# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2021-02-21 18:54-0300\n"
"PO-Revision-Date: 2021-04-14 02:53+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Persian <https://translate-dev.freebsd.org/projects/"
"documentation/booksdevelopers-handbooksecurechapter/fa/>\n"
"Language: fa\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 4.5.2\n"

#. type: YAML Front Matter: title
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:1
#, no-wrap
msgid "Chapter 3. Secure Programming"
msgstr ""

#. type: Title =
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:10
#, no-wrap
msgid "Secure Programming"
msgstr "برنامه‌نویسی ایمن"

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:35
#, no-wrap
msgid "Synopsis"
msgstr "چکیده"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:38
msgid ""
"This chapter describes some of the security issues that have plagued UNIX(R) "
"programmers for decades and some of the new tools available to help "
"programmers avoid writing exploitable code."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:40
#, no-wrap
msgid "Secure Design Methodology"
msgstr "روش‌شناسی طراحی ایمن"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:43
#, fuzzy
msgid ""
"Writing secure applications takes a very scrutinous and pessimistic outlook "
"on life. Applications should be run with the principle of \"least "
"privilege\" so that no process is ever running with more than the bare "
"minimum access that it needs to accomplish its function. Previously tested "
"code should be reused whenever possible to avoid common mistakes that others "
"may have already fixed."
msgstr ""
"نوشتن برنامه‌های ایمن نیازمند نظرگاهی بسیار دقیق و بدبینانه نسبت به زندگی "
"است. برنامه‌ها باید با اصل <quote>کمترین امتیاز</quote> اجرا شوند تا هیچ "
"فرآیندی با بیش از حداقل دسترسی که برای دستیابی به کارکرد خود نیاز دارد اجرا "
"نشود. کدهای از پیش آزموده شده باید هرزمان که ممکن بود مجدداً مورد استفاده "
"قرار گیرند تا از اشتباهات رایجی که دیگران احتمالاً از پیش رفع کرده‌اند "
"اجتناب شود."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:45
msgid ""
"One of the pitfalls of the UNIX(R) environment is how easy it is to make "
"assumptions about the sanity of the environment. Applications should never "
"trust user input (in all its forms), system resources, inter-process "
"communication, or the timing of events. UNIX(R) processes do not execute "
"synchronously so logical operations are rarely atomic."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:47
#, no-wrap
msgid "Buffer Overflows"
msgstr "سرریز میان‌گیر"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:50
msgid ""
"Buffer Overflows have been around since the very beginnings of the von "
"Neumann <<cod,1>> architecture.  They first gained widespread notoriety in "
"1988 with the Morris Internet worm. Unfortunately, the same basic attack "
"remains effective today. By far the most common type of buffer overflow "
"attack is based on corrupting the stack."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:52
msgid ""
"Most modern computer systems use a stack to pass arguments to procedures and "
"to store local variables. A stack is a last in first out (LIFO) buffer in "
"the high memory area of a process image. When a program invokes a function a "
"new \"stack frame\" is created. This stack frame consists of the arguments "
"passed to the function as well as a dynamic amount of local variable "
"space. The \"stack pointer\" is a register that holds the current location "
"of the top of the stack. Since this value is constantly changing as new "
"values are pushed onto the top of the stack, many implementations also "
"provide a \"frame pointer\" that is located near the beginning of a stack "
"frame so that local variables can more easily be addressed relative to this "
"value. <<cod,1>> The return address for function calls is also stored on the "
"stack, and this is the cause of stack-overflow exploits since overflowing a "
"local variable in a function can overwrite the return address of that "
"function, potentially allowing a malicious user to execute any code he or "
"she wants."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:54
msgid ""
"Although stack-based attacks are by far the most common, it would also be "
"possible to overrun the stack with a heap-based (malloc/free) attack."
msgstr ""
"گرچه حملات مبتنی بر پشته با اختلاف رایج‌ترین آنها هستند، اما سرریز کردن پشته "
"از طریق حملهٔ مبتنی بر هیپ (malloc/free) نیز ممکن است."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:56
msgid ""
"The C programming language does not perform automatic bounds checking on "
"arrays or pointers as many other languages do. In addition, the standard C "
"library is filled with a handful of very dangerous functions."
msgstr ""
"زبان برنامه‌نویسی C به‌طور خودکار بررسی حدود را بر روی آرایه‌ها یا اشاره‌"
"گرها چنانکه بسیاری از زبان‌ها انجام می‌دهند، انجام نمی‌دهد. همچنین، کتابخانهٔ"
" استاندارد C پر است از تعداد انگشت‌شماری از توابع بسیار خطرناک."

#. type: Table
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:95
#, no-wrap
msgid ""
"|`strcpy`(char *dest, const char *src)\n"
"|\n"
"\n"
"May overflow the dest buffer\n"
"\n"
"|`strcat`(char *dest, const char *src)\n"
"|\n"
"\n"
"May overflow the dest buffer\n"
"\n"
"|`getwd`(char *buf)\n"
"|\n"
"\n"
"May overflow the buf buffer\n"
"\n"
"|`gets`(char *s)\n"
"|\n"
"\n"
"May overflow the s buffer\n"
"\n"
"|`[vf]scanf`(const char *format, ...)\n"
"|\n"
"\n"
"May overflow its arguments.\n"
"\n"
"|`realpath`(char *path, char resolved_path[])\n"
"|\n"
"\n"
"May overflow the path buffer\n"
"\n"
"|`[v]sprintf`(char *str, const char *format, ...)\n"
"|\n"
"\n"
"May overflow the str buffer.\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:97
#, no-wrap
msgid "Example Buffer Overflow"
msgstr "سرریز میان‌گیر نمونه"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:100
msgid ""
"The following example code contains a buffer overflow designed to overwrite "
"the return address and skip the instruction immediately following the "
"function call. (Inspired by <<Phrack,4>>)"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:104
#, no-wrap
msgid "#include <stdio.h>\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:109
#, no-wrap
msgid ""
"void manipulate(char *buffer) {\n"
"  char newbuffer[80];\n"
"  strcpy(newbuffer,buffer);\n"
"}\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:113
#, no-wrap
msgid ""
"int main() {\n"
"  char ch,buffer[4096];\n"
"  int i=0;\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:115
#, no-wrap
msgid "  while ((buffer[i++] = getchar()) != '\\n') {};\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:122
#, no-wrap
msgid ""
"  i=1;\n"
"  manipulate(buffer);\n"
"  i=2;\n"
"  printf(\"The value of i is : %d\\n\",i);\n"
"  return 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:125
msgid ""
"Let us examine what the memory image of this process would look like if we "
"were to input 160 spaces into our little program before hitting return."
msgstr ""
"بگذارید بررسی کنیم نمای حافظهٔ این پردازش به چه شکل می‌شد چنانچه قرار بود "
"۱۶۰ فاصله درون برنامهٔ کوچک خود وارد کنیم، قبل از زدن کلید return."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:129
msgid ""
"Obviously more malicious input can be devised to execute actual compiled "
"instructions (such as exec(/bin/sh))."
msgstr ""
"بدیهی است که ورودی‌های مخرب بیشتری می‌توان استفاده کرد که دستورالعمل‌های "
"همگردانی شده واقعی (مانند exec(/bin/sh)) را اجرا کنند."

#. type: Title ===
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:130
#, no-wrap
msgid "Avoiding Buffer Overflows"
msgstr "جلوگیری از سرریز میان‌گیر"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:133
msgid ""
"The most straightforward solution to the problem of stack-overflows is to "
"always use length restricted memory and string copy functions. `strncpy` and "
"`strncat` are part of the standard C library.  These functions accept a "
"length value as a parameter which should be no larger than the size of the "
"destination buffer. These functions will then copy up to 'length' bytes from "
"the source to the destination. However there are a number of problems with "
"these functions. Neither function guarantees NUL termination if the size of "
"the input buffer is as large as the destination. The length parameter is "
"also used inconsistently between strncpy and strncat so it is easy for "
"programmers to get confused as to their proper usage. There is also a "
"significant performance loss compared to `strcpy` when copying a short "
"string into a large buffer since `strncpy` NUL fills up the size specified."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:135
#, fuzzy
msgid ""
"Another memory copy implementation exists to get around these problems. The "
"`strlcpy` and `strlcat` functions guarantee that they will always null "
"terminate the destination string when given a non-zero length argument."
msgstr ""
"پیاده‌سازی دیگری از کپی‌برداری حافظه برای مدیریت این مشکلات وجود دارد. توابع "
"<function>strlcpy</function> و <function>strlcat</function> تضمین می‌کنند که "
"همیشه رشتهٔ مقصد را به‌هنگام داده شدن برهانی به اندازهٔ غیر صفر، پایان‌دهیِ "
"پوچ کند."

#. type: Title ====
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:136
#, no-wrap
msgid "Compiler based run-time bounds checking"
msgstr "بررسی حدود زمان اجرا بر پایهٔ همگردان"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:139
#, fuzzy
msgid ""
"Unfortunately there is still a very large assortment of code in public use "
"which blindly copies memory around without using any of the bounded copy "
"routines we just discussed. Fortunately, there is a way to help prevent such "
"attacks - run-time bounds checking, which is implemented by several C/C++ "
"compilers."
msgstr ""
"شوربختانه، هنوز هم گسترهٔ بسیار بزرگی از کد در دسترس عموم هست که کورکورانه "
"بدون رعایت روال کپی‌‌برداریِ محدود که پیش‌تر در موردش بحث کردیم از حافظه کپی‌"
"برداری می‌کند. خوشبختانه، راهی برای پیشگیری از چنین حملاتی وجود دارد — بررسی "
"حدود زمان اجرا، که توسط چندین همگردان C/C++ پیاده‌سازی شده است."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:141
msgid ""
"ProPolice is one such compiler feature, and is integrated into man:gcc[1] "
"versions 4.1 and later. It replaces and extends the earlier StackGuard "
"man:gcc[1] extension."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:143
#, fuzzy
msgid ""
"ProPolice helps to protect against stack-based buffer overflows and other "
"attacks by laying pseudo-random numbers in key areas of the stack before "
"calling any function. When a function returns, these \"canaries\" are "
"checked and if they are found to have been changed the executable is "
"immediately aborted. Thus any attempt to modify the return address or other "
"variable stored on the stack in an attempt to get malicious code to run is "
"unlikely to succeed, as the attacker would have to also manage to leave the "
"pseudo-random canaries untouched."
msgstr ""
"ProPolice با قرار دادن اعداد شبه تصادفی در نقاط کلیدی پشته قبل از فراخوانی "
"هرگونه تابع، به محافظت در برابر سرریزهای میان‌گیر مبتنی‌بر پشته و سایر حملات "
"کمک می‌کند. زمانی‌که یک تابع برمی‌گردد، این <quote>هشدارها</quote> بررسی می‌"
"شوند و چنانچه دچار تغییر شده باشند، پروندهٔ اجراپذیر به‌سرعت پایان می‌یابد. "
"از این رو هر تلاشی در راستای تغییر نشانی بازگشت یا سایر متغیرهای ذخیره شده "
"در پشته به‌منظور اجرای کد مخرب نافرجام خواهد بود، زیرا مهاجم مجبور می‌شود تا "
"هشدارهای شبه تصادفی را هم دست‌نخورده بگذارد."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:145
msgid ""
"Recompiling your application with ProPolice is an effective means of "
"stopping most buffer-overflow attacks, but it can still be compromised."
msgstr ""
"همگردانی مجدد برنامهٔ خود با ProPolice شیوه‌ای مؤثر برای متوقف کردن بیشتر "
"حملات سرریز میان‌گیر است، گرچه هنوز هم می‌تواند در معرض خطر قرار گیرد."

#. type: Title ====
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:146
#, no-wrap
msgid "Library based run-time bounds checking"
msgstr "بررسی حدود زمان اجرا بر پایهٔ کتابخانه"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:149
#, fuzzy
msgid ""
"Compiler-based mechanisms are completely useless for binary-only software "
"for which you cannot recompile. For these situations there are a number of "
"libraries which re-implement the unsafe functions of the C-library "
"(`strcpy`, `fscanf`, `getwd`, etc..) and ensure that these functions can "
"never write past the stack pointer."
msgstr ""
"سازوکارهای مبتنی‌بر همگردان برای نرم‌افزار فقط دودویی که قابلیت همگردانی "
"مجدد را ندارد سراسر بیهوده هستند. در چنین شرایطی چندین کتابخانه هستند که "
"توابع ناامن کتابخانهٔ C را مجدد پیاده‌سازی می‌کنند "
"(<function>strcpy</function>، <function>fscanf</function>، <function>getwd</"
"function> و غیره ...) و اطمینان پیدا می‌کنند که این توابع هرگز نتوانند فراتر "
"از اشاره‌گر پشته بنویسند."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:151
msgid "libsafe"
msgstr "libsafe"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:152
msgid "libverify"
msgstr "libverify"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:153
msgid "libparanoia"
msgstr "libparanoia"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:155
msgid ""
"Unfortunately these library-based defenses have a number of "
"shortcomings. These libraries only protect against a very small set of "
"security related issues and they neglect to fix the actual problem. These "
"defenses may fail if the application was compiled with "
"-fomit-frame-pointer. Also, the LD_PRELOAD and LD_LIBRARY_PATH environment "
"variables can be overwritten/unset by the user."
msgstr ""
"شوربختانه این دست محافظت‌های مبتنی‌بر کتابخانه دارای کاستی‌هایی هستند. این "
"کتابخانه‌ها تنها در برابر تعداد بسیار کمی از مسائل امنیتی محافظت می‌کنند و "
"در رفع مشکل اصلی ناتوان هستند. این دفاعیات ممکن است چنانچه برنامه با -fomit-"
"frame-pointer همگردان شده باشد شکست بخورند. همچنین، متغیرهای محیطی ِ"
"LD_PRELOAD و LD_LIBRARY_PATH می‌توانند توسط کاربر رونوشت/بازنشانده شوند."

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:157
#, no-wrap
msgid "SetUID issues"
msgstr "مشکلات SetUID"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:160
msgid ""
"There are at least 6 different IDs associated with any given process, and "
"you must therefore be very careful with the access that your process has at "
"any given time. In particular, all seteuid applications should give up their "
"privileges as soon as it is no longer required."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:162
msgid ""
"The real user ID can only be changed by a superuser process. The login "
"program sets this when a user initially logs in and it is seldom changed."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:164
#, fuzzy
msgid ""
"The effective user ID is set by the `exec()` functions if a program has its "
"seteuid bit set. An application can call `seteuid()` at any time to set the "
"effective user ID to either the real user ID or the saved set-user-ID. When "
"the effective user ID is set by `exec()` functions, the previous value is "
"saved in the saved set-user-ID."
msgstr ""
"درصورتی‌که seteuid برای یک برنامه تنظیم شده باشد، شناسهٔ کاربر مؤثر توسط "
"توابع <function>exec()</function> تنظیم می‌شود. یک برنامه می‌تواند "
"<function>seteuid()</function> را هر زمان فراخوانی کند تا شناسهٔ کاربر مؤثر "
"را یا روی شناسهٔ کاربر حقیقی یا روی مقدار ذخیره‌شدهٔ set-user-ID تنظیم کند. "
"هنگامی‌که شناسهٔ کاربر مؤثر توسط توابع <function>exec()</function> تنظیم "
"می‌شود، مقدار قبلی در set-user-ID ذخیره‌شده ذخیره می‌شود."

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:166
#, no-wrap
msgid "Limiting your program's environment"
msgstr "محدودسازی محیط برنامه"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:169
msgid ""
"The traditional method of restricting a process is with the `chroot()` "
"system call. This system call changes the root directory from which all "
"other paths are referenced for a process and any child processes. For this "
"call to succeed the process must have execute (search) permission on the "
"directory being referenced. The new environment does not actually take "
"effect until you `chdir()` into your new environment. It should also be "
"noted that a process can easily break out of a chroot environment if it has "
"root privilege. This could be accomplished by creating device nodes to read "
"kernel memory, attaching a debugger to a process outside of the "
"man:chroot[8] environment, or in many other creative ways."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:171
msgid ""
"The behavior of the `chroot()` system call can be controlled somewhat with "
"the kern.chroot_allow_open_directories `sysctl` variable. When this value is "
"set to 0, `chroot()` will fail with EPERM if there are any directories "
"open. If set to the default value of 1, then `chroot()` will fail with EPERM "
"if there are any directories open and the process is already subject to a "
"`chroot()` call. For any other value, the check for open directories will be "
"bypassed completely."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:172
#, no-wrap
msgid "FreeBSD's jail functionality"
msgstr "عملکرد زندان FreeBSD"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:175
#, fuzzy
msgid ""
"The concept of a Jail extends upon the `chroot()` by limiting the powers of "
"the superuser to create a true `virtual server'. Once a prison is set up all "
"network communication must take place through the specified IP address, and "
"the power of \"root privilege\" in this jail is severely constrained."
msgstr ""
"مفهوم زندان بر روی <function>chroot()</function> و با محدود کردن قدرت "
"ابرکاربر در ساخت 'کارساز مجازی' گسترش می‌یابد. هنگامی‌که زندان ساخته می‌شود، "
"تمام ارتباطات شبکه باید از طریق نشانی IP مشخص شده آغاز شوند، و قدرت \"امتیاز "
"ریشه\" در این زندان به‌شدت محدود می‌شود."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:177
#, fuzzy
msgid ""
"While in a prison, any tests of superuser power within the kernel using the "
"`suser()` call will fail. However, some calls to `suser()` have been changed "
"to a new interface `suser_xxx()`. This function is responsible for "
"recognizing or denying access to superuser power for imprisoned processes."
msgstr ""
"زمانی‌که در زندان هستید، هر آزمونی برای حصول قدرت ابرکاربر در محدودهٔ هسته "
"توسط فراخوان <function>suser()</function> نافرجام خواهد بود. گرچه، برخی "
"فراخوان‌ها به <function>suser()</function>، به یک رابط جدید "
"<function>suser_xxx()</function> تغییر یافته‌اند. این تابع مسئول تشخیص یا "
"انکار دسترسی به قدرت ابرکاربری برای فرآیندهای محبوس شده است."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:179
msgid "A superuser process within a jailed environment has the power to:"
msgstr "یک پردازش ابرکاربر در محیطی زندانی شده قدرت انجام موارد پیش‌رو را دارد:"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:181
msgid ""
"Manipulate credential with `setuid`, `seteuid`, `setgid`, `setegid`, "
"`setgroups`, `setreuid`, `setregid`, `setlogin`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:182
msgid "Set resource limits with `setrlimit`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:183
msgid "Modify some sysctl nodes (kern.hostname)"
msgstr "ویرایش کردن برخی از گره‌های sysctl (kern.hostname)"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:184
msgid "`chroot()`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:185
msgid "Set flags on a vnode: `chflags`, `fchflags`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:186
msgid ""
"Set attributes of a vnode such as file permission, owner, group, size, "
"access time, and modification time."
msgstr ""
"نتظیم کردن صفات یک vnode مانند مجوز پرونده، مالک، گروه، اندازه، زمان دسترسی، "
"زمان ویرایش."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:187
msgid "Bind to privileged ports in the Internet domain (ports < 1024)"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:189
#, fuzzy
msgid ""
"`Jail` is a very useful tool for running applications in a secure "
"environment but it does have some shortcomings. Currently, the IPC "
"mechanisms have not been converted to the `suser_xxx` so applications such "
"as MySQL cannot be run within a jail. Superuser access may have a very "
"limited meaning within a jail, but there is no way to specify exactly what "
"\"very limited\" means."
msgstr ""
"<function>Jail</function> یک ابزار بسیار مفید برای راه‌اندازی برنامه‌ها در "
"یک محیط ایمن است، اما کاستی‌هایی نیز دارد. هم‌اکنون، سازوکارهای IPC به "
"<function>suser_xxx</function> تبدیل نشده‌اند، از این رو برنامه‌های چون "
"MySQL نمی‌توانند درون زندان اجرا شوند. دسترسی ابرکاربری می‌تواند مفهومی "
"بسیار محدود درون زندان داشته باشد، اما هیچ راهی برای تشخیص دقیق مفهوم \"بسیار"
" محدود\" وجود ندارد."

#. type: Title ===
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:190
#, no-wrap
msgid "POSIX(R).1e Process Capabilities"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:193
msgid ""
"POSIX(R) has released a working draft that adds event auditing, access "
"control lists, fine grained privileges, information labeling, and mandatory "
"access control."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:195
msgid ""
"This is a work in progress and is the focus of the "
"http://www.trustedbsd.org/[TrustedBSD] project. Some of the initial work has "
"been committed to FreeBSD-CURRENT (cap_set_proc(3))."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:197
#, no-wrap
msgid "Trust"
msgstr "اعتماد"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:200
msgid ""
"An application should never assume that anything about the users environment "
"is sane. This includes (but is certainly not limited to): user input, "
"signals, environment variables, resources, IPC, mmaps, the filesystem "
"working directory, file descriptors, the # of open files, etc."
msgstr ""
"یک برنامه هرگز نباید فرض کند که هر چیزی در ارتباط با محیط کاربران عاقلانه "
"است. این شامل (اما مطمئناً نه محدود به): ورودی کاربر، سیگنال‌ها، متغیرهای "
"محیطی، منابع، IPC، mmaps، مسیر کاری سامانهٔ پرونده، توصیف‌گرهای پرونده، # در "
"پرونده‌های باز، و غیره است."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:202
msgid ""
"You should never assume that you can catch all forms of invalid input that a "
"user might supply. Instead, your application should use positive filtering "
"to only allow a specific subset of inputs that you deem safe. Improper data "
"validation has been the cause of many exploits, especially with CGI scripts "
"on the world wide web. For filenames you need to be extra careful about "
"paths (\"../\", \"/\"), symbolic links, and shell escape characters."
msgstr ""
"هرگز نباید فرض کنید که می‌توانید تمام اشکال ورودی نامعتبری که ممکن است کاربر "
"عرضه کند را بگیرید. در عوض، برنامه شما باید از فیلتری قطعی برای قبول کردن "
"مجموعهٔ خاص ورودی‌هایی که شما ایمن می‌دانید استفاده کند. اعتبارسنجی نامناسب "
"دلیل سوءاستفاده‌های بسیاری بوده است، به‌ویژه اجرانامه‌های CGI بر روی تارِ "
"جهان‌گستر. برای اسامی پرونده‌ها نیاز به دقت بسیار در مورد مسیرها (\"../\", \""
"/\")، پیوندهای نمادین، و نویسه‌های رهایی پوسته دارید."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:204
#, fuzzy
msgid ""
"Perl has a really cool feature called \"Taint\" mode which can be used to "
"prevent scripts from using data derived outside the program in an unsafe "
"way. This mode will check command line arguments, environment variables, "
"locale information, the results of certain syscalls (`readdir()`, "
"`readlink()`, `getpwxxx()`), and all file input."
msgstr ""
"Perl امکان بسیار جالبی به نام \"Taint\" دارد که می‌تواند برای جلوگیری از به‌"
"کاربردن داده‌های به‌دست آمدهٔ خارج از برنامه توسط اجرانامه‌ها به‌روشی ناامن "
"مورد استفاده قرار گیرد. این حالت براهین خط فرمان، متغیرهای محیطی، اطلاعات "
"محلی، نتایج برخی فراخوان‌های سامانه (<function>readdir()</function>, "
"<function>readlink()</function>, <function>getpwxxx()</function>)، و تمام "
"ورودی‌های پرونده را بررسی می‌کند."

#. type: Title ==
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:206
#, no-wrap
msgid "Race Conditions"
msgstr "حالات تسابق"

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:209
msgid ""
"A race condition is anomalous behavior caused by the unexpected dependence "
"on the relative timing of events. In other words, a programmer incorrectly "
"assumed that a particular event would always happen before another."
msgstr ""
"حالت تسابق، رفتار نامعمول برانگیخته از وابستگی نابه‌هنگام به زمان‌بندی نسبی "
"رویدادها است. به بیان دیگر، یک برنامه‌نویس به اشتباه می‌پنداشت که یک رویداد "
"بخصوص همیشه قبل از دیگری روی می‌دهد."

#. type: Plain text
#: documentation/content/en/books/developers-handbook/secure/chapter.adoc:210
#, fuzzy
msgid ""
"Some of the common causes of race conditions are signals, access checks, and "
"file opens. Signals are asynchronous events by nature so special care must "
"be taken in dealing with them. Checking access with `access(2)` then "
"`open(2)` is clearly non-atomic. Users can move files in between the two "
"calls. Instead, privileged applications should `seteuid()` and then call "
"`open()` directly. Along the same lines, an application should always set a "
"proper umask before `open()` to obviate the need for spurious `chmod()` "
"calls."
msgstr ""
"برخی از علل حالات تسابق شامل سیگنال‌ها، بررسی دسترسی، و پرونده‌های باز "
"هستند. سیگنال‌ها به‌طور طبیعی رویدادهایی ناهمزمان هستند، از این رو باید "
"مراقبت‌های ویژه‌ای در قبال آنها انجام گیرد. بررسی دسترسی توسط "
"<function>access(2)</function> و سپس <function>open(2)</function> آشکارا "
"غیراتمی است. کاربران می‌توانند پرونده‌ها را در بین دو سلول حرکت دهند. در عوض،"
" برنامه‌های امتیازدار باید <function>seteuid()</function> کنند و سپس "
"<function>open()</function> را به‌طور مستقیم فراخوانی کنند. در امتداد همان "
"خطوط، یک برنامه همیشه باید یک umask مناسب قبل از <function>open()</function> "
"قرار دهد تا نیازمندی برای فراخوان‌های نامعتبرِ <function>chmod()</function> "
"را برطرف کند."
